package api.test;

import api.endpoints.userEndPoints;
import api.endpoints.userEndPoints2;
import api.payload.User;
import com.github.javafaker.Faker;
import io.restassured.response.Response;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import static org.testng.Assert.assertEquals;

public class UserTests2 {
    Faker faker;
    User userPayload;

    public Logger logger;

    @BeforeClass
    public void setUp() {
        faker = new Faker();
        userPayload = new User();
        //for this API, id is generated by faker class, not api is generated randomly
        userPayload.setId(faker.idNumber().hashCode());
        userPayload.setUsername(faker.name().username());
        userPayload.setFirstName(faker.name().firstName());
        userPayload.setLastName(faker.name().lastName());
        userPayload.setEmail(faker.internet().safeEmailAddress());
        userPayload.setPassword(faker.internet().password(5,10));
        userPayload.setPhone(faker.phoneNumber().cellPhone());

        logger = LogManager.getLogger(this.getClass());
    }

    @Test(priority=1)
    public void testPostUser() {
        logger.info("*************** Creating user **************");
        Response response = userEndPoints2.createUser(userPayload);
        response.then().log().all();
        assertEquals(response.getStatusCode(), 200);
        logger.info("*************** User created **************");
    }

    @Test(priority=2)
    public void testGetUserByName() {

        logger.info("*************** Reading User info **************");
        Response response = userEndPoints2.getUser(this.userPayload.getUsername());
        response.then().log().all();
        assertEquals(response.getStatusCode(), 200);
        logger.info("*************** User info displayed **************");
    }

    @Test(priority=3)
    public void testUpdateUserByName() {

        logger.info("*************** Updating user **************");
        userPayload.setFirstName(faker.name().firstName());
        userPayload.setLastName(faker.name().lastName());
        userPayload.setEmail(faker.internet().safeEmailAddress());

        Response response = userEndPoints2.updateUser(this.userPayload.getUsername(), userPayload);
        response.then().log().body();
        assertEquals(response.getStatusCode(), 200);
        logger.info("*************** User updated **************");

        //checking data after update
        Response responseAfterUpdate = userEndPoints2.getUser(this.userPayload.getUsername());
        responseAfterUpdate.then().log().all();
        assertEquals(responseAfterUpdate.getStatusCode(), 200);
    }

    @Test(priority=4)
    public void testDeleteUserByName() {

        logger.info("*************** Deleting user **************");
        Response response = userEndPoints2.deleteUser(this.userPayload.getUsername());
        assertEquals(response.getStatusCode(), 200);
        logger.info("***************  User deleted **************");
    }
}
